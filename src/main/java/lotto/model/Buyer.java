package lotto.model;

import lotto.model.enums.Ranking;
import lotto.util.NumbersCreator;

import java.util.*;

public class Buyer {
    private final List<Lotto> lottoes;

    private Buyer(List<Lotto> lottoes) {
        this.lottoes = lottoes;
    }

    public static Buyer of(int amount, NumbersCreator numbersCreator) {
        List<Lotto> result = new ArrayList<>();
        for (int index = 0; index < amount; index++) {
            Lotto autoGeneratedLotto = shuffledLotto(result, numbersCreator);
            result.add(autoGeneratedLotto);
        }
        return new Buyer(result);
    }

    public int size() {
        return this.lottoes.size();
    }

    public List<Lotto> value() {
        return Collections.unmodifiableList(this.lottoes);
    }

    private static Lotto shuffledLotto(List<Lotto> result, NumbersCreator numbersCreator) {
        Lotto lotto = Lotto.of(numbersCreator);
        while (isDuplicatedLotto(result, lotto)) {
            lotto = Lotto.of(numbersCreator);
        }
        return lotto;
    }

    private static boolean isDuplicatedLotto(List<Lotto> result, Lotto lotto) {
        return result.contains(lotto);
    }

    public Map<Ranking, Integer> rankings(Seller seller) {
        Map<Ranking, Integer> result = new HashMap<>();
        Arrays.stream(Ranking.values()).forEach(ranking -> {
            result.put(ranking, rankingCount(seller, ranking));
        });
        return result;
    }

    private int rankingCount(Seller seller, Ranking fourth) {
        long count = this.lottoes.stream()
                .map(lotto -> lotto.compare(seller.winningLotto()))
                .filter(fourth::equals)
                .count();
        return Long.valueOf(count)
                .intValue();
    }
}
